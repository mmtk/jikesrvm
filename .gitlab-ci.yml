cache:
  paths:
    - benchmarks/

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - perf-run
  - perf-check

before_script:
  - '! [ -e ./benchmarks/dacapo-2006-10-MR2.jar ] && mkdir -p benchmarks && wget https://downloads.sourceforge.net/project/dacapobench/archive/2006-10-MR2/dacapo-2006-10-MR2.jar -O benchmarks/dacapo-2006-10-MR2.jar'

build:pre-commit:
  stage: build
  script:
    - python scripts/testMMTk.py -T pre-commit

build:rbasebasenogc:
  stage: build
  script:
    - python scripts/testMMTk.py -g RBaseBaseNoGC

build:rfastadaptivenogc:
  stage: build
  script:
    - python scripts/testMMTk.py -g RFastAdaptiveNoGC

build:fastadaptivenogc:
  stage: build
  script:
    - python scripts/testMMTk.py -g FastAdaptiveNoGC

build:rfulladaptivenogc:
  stage: build
  script:
    - python scripts/testMMTk.py -g RFullAdaptiveNoGC

build:basebasenogc:
  stage: build
  script:
    - python scripts/testMMTk.py -g BaseBaseNoGC

build:rbasebasesemispace:
  stage: build
  script:
    - python scripts/testMMTk.py -g RBaseBaseSemiSpace

build:rfastadaptivesemispace:
  stage: build
  script:
    - python scripts/testMMTk.py -g RFastAdaptiveSemiSpace

build:fastadaptivesemispace:
  stage: build
  script:
    - python scripts/testMMTk.py -g FastAdaptiveSemiSpace

build:rfulladaptivesemispace:
  stage: build
  script:
    - python scripts/testMMTk.py -g RFullAdaptiveSemiSpace

build:basebasesemispace:
  stage: build
  script:
    - python scripts/testMMTk.py -g BaseBaseSemiSpace

perf-run:
  stage: perf-run
  script:
    # Build all builds here
    # I was trying to preserve them as artifacts from previous stage. However, the build directory
    # was changed from stage to stage, and the libmmtk.so dependency relies on absolute path
    # that no longer exists.
    - python scripts/testMMTk.py -g FastAdaptiveNoGC --build-only
    - python scripts/testMMTk.py -g RFastAdaptiveNoGC --build-only
    - python scripts/testMMTk.py -g FastAdaptiveSemiSpace --build-only
    - python scripts/testMMTk.py -g RFastAdaptiveSemiSpace --build-only
    # clone running scripts
    - git clone git@gitlab.anu.edu.au:plsl/tools/running.git .ci/running -b rust-mmtk
    - ln -s "$(realpath dist)" .ci/running/build
    - mkdir -p .ci/running/bin/probes
    - cp .ci/probes.jar .ci/running/bin/probes/probes.jar
    # run NoGC plans first
    - cp .ci/NoGC_RunConfig.pm .ci/running/bin/RunConfig.pm
    - .ci/running/bin/runbms 16 16 &> nogc.run
    - cat nogc.run
    # run other plans
    - cp .ci/Other_RunConfig.pm .ci/running/bin/RunConfig.pm
    - .ci/running/bin/runbms 16 16 &> other.run
    - cat other.run
    # check
    - python .ci/run-check.py nogc.run
    - python .ci/run-check.py other.run
  artifacts:
    when: always
    paths:
      - .ci/running/results/log
      - nogc.run
      - other.run
  allow_failure: true

NoGC:
  stage: perf-check
  script:
    - python .ci/perf-check.py .ci/running/results/log FastAdaptiveNoGC
  when: always

SemiSpace:
  stage: perf-check
  script:
    - python .ci/perf-check.py .ci/running/results/log FastAdaptiveSemiSpace
  when: always
