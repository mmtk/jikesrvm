<!--
 ~  This file is part of the Jikes RVM project (http://jikesrvm.org).
 ~
 ~  This file is licensed to You under the Eclipse Public License (EPL);
 ~  You may not use this file except in compliance with the License. You
 ~  may obtain a copy of the License at
 ~
 ~      http://www.opensource.org/licenses/eclipse-1.0.php
 ~
 ~  See the COPYRIGHT.txt file distributed with this work for information
 ~  regarding copyright ownership.
 -->
<project name="classpath" default="build" basedir=".">

  <import file="base.xml"/>

  <!-- NOTE: when incrementing classpath version, check the patches -->
  <!-- in target patch-classpath-web                                -->
  <property name="classpath.version" value="99"/>
  <!-- Change this whenever you alter the patches. It will let people know classpath has changed. -->
  <property name="classpath.patchlevel" value="16"/>
  <property name="classpath.description" value="GNU Classpath"/>

  <property name="classpath.component.dir" location="${components.dir}/classpath"/>
  <property name="classpath.package.dir" value="${classpath.component.dir}/${classpath.version}p${classpath.patchlevel}"/>
  <property name="classpath.dir" value="${classpath.package.dir}/classpath"/>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *               Downloading and installing Classpath component             * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <!-- init properties for downloading classpath from git repository or from web -->
  <target name="init-classpath-properties" depends="prepare-ant-tasks">
    <condition property="classpath.from-web" value="true">
      <and>
        <not>
          <isset property="classpath.from-git"/>
        </not>
        <not>
          <isset property="classpath.from-web"/>
        </not>
        <or>
          <not>
            <available file="${classpath.package.dir}/classpath/README"/>
          </not>
          <isset property="classpath.force-download"/>
        </or>
      </and>
    </condition>
  </target>

  <!-- download classpath from git -->
  <target name="get-classpath-from-git" depends="init-classpath-properties" if="classpath.from-git">
    <test-file name="git.exe" location="${host.file}"/>
    <mkdir dir="${classpath.package.dir}"/>
    <delete dir="${classpath.package.dir}/classpath"/>
    <exec executable="${git.exe}" failonerror="true" dir="${classpath.package.dir}">
      <arg value="clone"/>
      <arg value="http://git.savannah.gnu.org/r/classpath.git/"/>
    </exec>
  </target>

  <!-- download classpath from web -->
  <target name="get-classpath-from-web" depends="init-classpath-properties" if="classpath.from-web">
    <test-file name="tar.exe" location="${host.file}"/>
    <property name="classpath.web-archive" value="classpath-0.${classpath.version}.tar.gz"/>
    <mkdir dir="${classpath.package.dir}"/>
    <cachedGet key="${classpath.web-archive}"
         src="ftp://ftp.gnu.org/gnu/classpath/${classpath.web-archive}"
         dest="${classpath.package.dir}/${classpath.web-archive}"/>
    <!-- use tar.exe so can maintain executable bits on appropriate files. Could use untar+chmod task for same but it was annoying -->
    <exec executable="${tar.exe}" failonerror="true" dir="${classpath.package.dir}">
      <arg value="xzf"/>
      <arg value="${classpath.web-archive}"/>
    </exec>
    <move file="${classpath.package.dir}/classpath-0.${classpath.version}"
          tofile="${classpath.package.dir}/classpath"/>
  </target>

  <target name="fetch" depends="get-classpath-from-web,get-classpath-from-git"/>

  <!-- *************************************************************************** -->
  <!--                        patch classpath                                      -->
  <!-- In general these are patches to issues reported to classpath but not yet    -->
  <!-- committed (patches against Git head) or in a stable release (against 'web') -->
  <!-- please maintain separate patches for Git head and stable versions           -->
  <!-- of classpath, even if the patch is identical                                -->
  <!-- *************************************************************************** -->

  <!-- Patches against Git head -->
  <target name="patch-classpath-git" depends="fetch" if="classpath.from-git">
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-443.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-644.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-732.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-750.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-853.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-855.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>    
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-881.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-878.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-889-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-903.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-git.RVM-1047.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
  </target>

  <!-- Patches against the current stable version -->
  <target name="patch-classpath-web" depends="fetch" if="classpath.from-web">
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-443.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-644.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-732.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-750.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <!-- Various build fixes for GNU Classpath 0.99 taken from upstream git repo,
         ordered by date -->
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-02.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-03.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-04.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-05.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-06.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-07.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-773-08.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <!-- End build fixes -->
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-781-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-781-02.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-781-03.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-781-04.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-787.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-853.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-855.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-878.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-881.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-889-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-889-02.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-903.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-914.patch"
           dir="${classpath.package.dir}/classpath/" strip="1"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-1003.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-1028.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-1047.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
  </target>
  <target name="patch" depends="patch-classpath-web,patch-classpath-git"/>

  <!-- build classpath in classpath.dir -->
  <target name="build" depends="fetch,patch" description="Download Classpath and build.">
    <!--
      We currently need to run autogen for all options:
      - classpath git doesn't ship makefiles
      - classpath archives ship makefiles but the classpath-web.RVM-773-08.patch
          changes Makefile.am so we have to regenerate them
    -->
    <exec executable="${classpath.dir}/autogen.sh" failonerror="true" dir="${classpath.dir}"/>

    <test-file name="make.exe" location="${host.file}"/>

    <condition property="cp.enable.gtk-peer" value=" --enable-gtk-peer" else=" --disable-gtk-peer">
      <and>
        <not>
          <or>
            <equals arg1="${target.os}" arg2="Solaris"/> 
            <equals arg1="${target.name}" arg2="ppc64-linux"/>
            <equals arg1="${target.name}" arg2="x86_64-linux"/>
            <equals arg1="${target.name}" arg2="x86_64_m32-linux"/>
            <equals arg1="${target.name}" arg2="x86_64_m64-linux"/>
            <equals arg1="${target.name}" arg2="x86_64_m64s-linux"/>
          </or>
        </not>
        <or>
          <available file="/usr/include/gtk-2.0/gtk/gtk.h"/>
          <available file="/opt/gnome/include/gtk-2.0/gtk/gtk.h"/>
        </or>
      </and>
    </condition>

    <condition property="cp.enable.portable-native-sync" value=" --enable-portable-native-sync" else="">
      <equals arg1="${config.portable-native-sync}" arg2="true"/>
    </condition>

    <condition property="cp.disable.alsa" value=" --disable-alsa" else="">
      <or>
        <equals arg1="${target.name}" arg2="x86_64-linux"/>
        <equals arg1="${target.name}" arg2="x86_64_m32-linux"/>
        <equals arg1="${target.name}" arg2="x86_64_m64-linux"/>
        <equals arg1="${target.name}" arg2="x86_64_m64s-linux"/>
      </or>
    </condition>

   <condition property="cp.cflags" value="-m64" else="">
     <or>
       <equals arg1="${target.name}" arg2="x86_64_m64-linux"/>
       <equals arg1="${target.name}" arg2="x86_64_m64s-linux"/>
     </or>
   </condition>


    <condition property="cp.libdirs" value="  --libdir=/usr/lib32 --x-libraries=/usr/lib32" else="">
      <or>
        <equals arg1="${target.name}" arg2="x86_64-linux"/>
        <equals arg1="${target.name}" arg2="x86_64_m32-linux"/>
      </or>
    </condition>

    <if>
      <conditions>
        <available file="${classpath.dir}/Makefile"/>
      </conditions>
      <sequential>
        <exec executable="${make.exe}" failonerror="true" dir="${classpath.dir}">
           <arg value="distclean"/>
        </exec>
      </sequential>
    </if>

    <property environment="env"/>
    <exec executable="${classpath.dir}/configure" failonerror="true" dir="${classpath.dir}">
      <!-- need to pass thru compiler settings so if we are building on
      64 bit system the libraries are created appropriately -->
      <env key="CXX" value="${c++.exe} ${c++.args}"/>
      <env key="CC" value="${c.exe} ${c.args}"/>
      <env key="CFLAGS" value="${cp.cflags}"/>
      <arg value="--enable-jni"/>
      <arg value="--disable-plugin"/>
      <arg value="--disable-gconf-peer"/>
      <arg value="--disable-examples"/>
      <!-- Don't build gjdoc, as this requires Antlr to be installed. -->
      <arg value="--disable-gjdoc"/>
      <arg value="--enable-Werror=no"/>
      <arg line="${cp.enable.gtk-peer}${cp.enable.portable-native-sync}${cp.disable.alsa}${cp.libdirs}"/>
    </exec>
    <exec executable="${make.exe}" failonerror="true" dir="${classpath.dir}">
      <env key="OBJECT_MODE" value="${cp.objectmode}" />
    </exec>

    <mkdir dir="${classpath.package.dir}/${target.name}/lib"/>
    <jar file="${classpath.package.dir}/${target.name}/lib/src.jar" basedir="${classpath.dir}">
      <include name="java/**/*.java"/>
      <include name="javax/**/*.java"/>
      <include name="gnu/**/*.java"/>
    </jar>
    <copy file="${classpath.dir}/lib/glibj.zip" tofile="${classpath.package.dir}/${target.name}/lib/classpath.jar"/>

    <condition property="library.suffix" value=".so">
      <equals arg1="${target.os}" arg2="Linux"/>
    </condition>
    <condition property="library.suffix" value=".dylib">
      <equals arg1="${target.os}" arg2="OSX"/>
    </condition>
    <condition property="library.suffix" value=".so">
      <equals arg1="${target.os}" arg2="Solaris"/>
    </condition>

    <copy todir="${classpath.package.dir}/${target.name}/lib" flatten="true">
      <regexpmapper from="^(.*${file.separator})lib([^${file.separator}]+)${library.suffix}$$"
                    to="${target.dll-prefix}\2${target.jni-suffix}"/>
      <fileset dir="${classpath.dir}">
        <include name="native/jni/**/.libs/*${library.suffix}"/>
        <include name="native/jawt/.libs/*${library.suffix}"/>
      </fileset>
    </copy>
    <writeComponentConstants dir="${classpath.package.dir}/${target.name}/lib"/>
    <setComponentsConfig key="${target.name}.classpath.lib.dir" value="${classpath.package.dir}/${target.name}/lib"/>
  </target>

  <target name="ensure" depends="prepare-ant-tasks">
    <ensureUptodate name="classpath" dir="${classpath.package.dir}/${target.name}/lib"/>
  </target>

</project>
