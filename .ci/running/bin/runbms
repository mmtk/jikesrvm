#!/usr/bin/perl
#
# I reserve no legal rights to this software, it is fully in the public
# domain.  Any company or individual may do whatever they wish with this
# software.
#
# Steve Blackburn May 2005, October 2007
#
# runbms <N> <n0> [<n1> [<n2> ... ]]
#
# This script will run a set of benchmark iterations for some number
# of benchmarks across a range of heapsizes.  It is designed to be
# driven by a script (currently called "fillin") which will specify a
# heapsize stepping order.
#
# The key work this script does is choose the heapsizes.  It will walk
# through a number of heapsizes in a range determined by "k" value
# constants set below, and the maxlivesize of the benchmark.  For
# example it might step through a range from 2.5 thorugh to 8 times
# the max livesize of each benchmark.
#
# The order in which it steps through the heapsize space is determined
# by the arguments to the script.  The first argument, N, is
# essentially the divisor. The remainder are a series of numerators.
# At each step a benchmark running script will be invoked with the
# benchmark name, a "kvalue", and a heapsize in MB.  The heapsize is
# determined by ni/N (a linear sequence), and an algorithm (below)
# which will spread out the steps, allowing finer stepping at the
# start than at the end.
#
#require "getopts.pl";
#&Getopts('ms');
use Getopt::Std;
getopt('ms');
use File::Basename;
use lib dirname (__FILE__);
use RunConfig;

$runbmscript = "$rootdir/bin/runbm";
$vfbwrapper = "xvfb-run -a ";
#$id = "mole-2007-07-13-Fri-170049"; #
getid();
print "Run id: $id\n";

#
# heapsize bounds in terms of max livesize
#
$startk = 1; # much smaller than 2.5 and most GCs will fail
$endk = $heaprange;   # must be < 10 for k val printing to work

#
# The extent to which the spacing of heapsize points should vary
#
$spreadfactor = 1;  # how much coarser is the spacing at the end relative 
                    # to start
$heaplimit = 2500;   # our GCs can't handle heaps bigger than this at present
#$heaplimit = 900;   # our GCs can't handle heaps bigger than this at present
$megabyte = 1<<20;

#
# The body of the script...
#
%doneh = ();
$N = shift(@ARGV);
if ($opt_m || $opt_s) {
    $enddivisor = sum(64)/($endk - $startk);
    onek(0);
} else {
    $enddivisor = sum($N)/($endk - $startk);
    foreach $i (@ARGV) {
#    print "working\n";
	$kvalue = $startk + (sum($i)/$enddivisor);
	if ($kvalue <= $endk) {
	    onek($kvalue);
	}
    }
}

sub onek {
    my ($kvalue) = @_;
    foreach $bm (@benchmarks) {
	if ($opt_m) {
	    $h = $heaplimit;
	    $kvalue = 9.999;
	} else {
	    if ($opt_s) {
		$h = $sliceHeapSize{$bm};
		$kvalue = (int(((($h+.5)/$minheap{$bm})-$startk)*$enddivisor)/$enddivisor) + $startk;
	    } else {
		$h = int(($minheap{$bm} * $kvalue) + 0.5);
	    }
	}
	if (!$doneh{$bm.$h}
	    && ($h >= $minheap{$bm}) && ($h <= $heaplimit)) {
	    $job = sprintf("$runbmscript %s %4.4d %d %d %s %s \"%s\"\n ", $id, $kvalue*1000, $h, $bmtimeout{$bm}*$bmtimeoutmultiplier, $bm, $bmexecdir{$bmsuite{$bm}}, $bmargs{$bmsuite{$bm}});
	    if ($needsvfb{$bm}) {
		$job = $vfbwrapper.$job;
		print "(xvfb) "
	    }
	    system($job);
#               print $job;                                                           
	    $doneh{$bm.$h} = $h;
	}
    }
    print "$producegraphs\n";
    system($producegraphs);
}

#
# A simple summation routine that works out the sum of the preceeding
# steps for some step j
#
sub sum {
    my ($j) = @_;
    return $j*(1 + ($spreadfactor/($N-1))*((($j+1)/2) - 1));
}

#
# Create a string that uniquely identifies this run
#
sub getid() {

    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    $mon += 1;
    $day = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[$wday];
    open (TMP, "hostname -s |");
    while (<TMP>) {
	($host) = /(\S+)/;
    }
    close TMP;
    $id = sprintf("%s-%4d-%2.2d-%2.2d-%s-%2.2d%2.2d%2.2d", $host, $year, $mon, $mday, $day, $hour, $min, $sec);
    return $id;
}
