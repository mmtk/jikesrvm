#!/usr/bin/perl
#
# I reserve no legal rights to this software, it is fully in the public
# domain.  Any company or individual may do whatever they wish with this
# software.
#
# Steve Blackburn May 2005, October 2007
#
# runbm <kval> <hsize> <timeout> <bmname> <bmdir> <bmargs>
#
# where:
#    kval is 1000*hsize/minheapsize
#    hsize is the heap size in MB
#    timeuot is the timeout for this benchmark in sec
#    bmname is the name given to the benchmark
#    bmdir is the directory in which the benchmark is executed
#    bmargs are the jvm args used to run the benchmark
#
use File::Basename;
use lib dirname (__FILE__);
use RunConfig;
$id = shift(@ARGV);
$kval = shift(@ARGV);
$h = shift(@ARGV);
$basetimeout = shift(@ARGV);
$benchmark = shift(@ARGV);
$benchmarkdir = shift(@ARGV);
$benchmarkargs = shift(@ARGV);
$replayid = "";

#
# GC configurations
#
	      
#
# Directories & files
#
$builddir = $rootdir."/build/";
$binsubdir = "/bin";
$bin = $rootdir.$binsubdir;
$remotebin = $remotedir.$binsubdir;
$resultsubdir = "/results/log/$id";
$rcsuf = ".ca";
$dcsuf = ".dc";
$ecsuf = ".ec";
if ($genadvice) { $resultsubdir .= $rcsuf; }
$resultdir = $rootdir.$resultsubdir;
$advicedir = $rootdir."/advice";
$tmprootdir = $rootdir."/tmp";
$tmpfile = $tmprootdir."/runbm.tmp";

#
# Synchronization and remote host
#
$do_rsync_remote = $remotehost ne "";
$remotedircmd = "ssh $remotehost 'mkdir -p $remotedir$resultsubdir'";
$rsynccmd = "$remotedircmd; rsync -ae ssh $resultdir $remotehost:$remotedir$resultsubdir/..";
$pollcmd = "poll";
$pollcopycmd = "scp $remotehost:$remotebin/$pollcmd $bin";
$startcmd = "sudo /sbin/startdaemons > /dev/null 2>&1";
$stopcmd = "sudo /sbin/stopdaemons > /dev/null 2>&1";

#
# Misc params
#
%failure = ();
$loglinelimit = 20000;  # truncate runaway output

#####################################################################
#
# The core of the script---run the benchmarks
#

#
# Shut down daemons if we're emulating single user mode
#
if ($standalonemode == 1) {
    system($stopcmd);
}

print STDERR "$benchmark $kval $h... ";

#
# clean up and make sure the directories are where we need them
#
system("rm -rf $tmprootdir; mkdir -p $tmprootdir; mkdir -p $resultdir");

#
# Now do the timing iterations
#
foreach $cfg (@gcconfigs) {
    $completed{$cfg} = 0;
}

for ($i = 0; $i < $maxinvocations; $i++) {
    print STDERR "$i";
    $c = 'a';
    foreach $cfg (@gcconfigs) {
	if ($completed{$cfg} < $targetinvocations) {
	    $log = "$tmprootdir/$benchmark.$kval.$h.$cfg.log";
	    $log =~ s/[|]/./g;
	    runnit($cfg, "", $benchmark, $benchmarkdir, $benchmarkargs, $kval, $h, $log, $i);
	    open (FOO, "tail -30 $log | egrep 'PASSED\|Finished' |");
	    $_ = <FOO>;
	    if (/Finished/ || /PASSED/ || /pseudojbb2005 complete/) {
		$completed{$cfg}++;
		print STDERR $c;
	    } else {
		print STDERR "_";
            }
	    close FOO;
	} else {
	    print STDERR ".";
	}
	$c++;
    }
}

print STDERR "\n";

#
# Bring the daemons back up again if we had shut them down
#
if ($standalonemode == 1) {
    system($startcmd);
    if ($do_rsync_remote) {
        system($pollcopycmd);
    }
    system($pollcmd);
}

#
# Finally, move all of the results to the results directory
#

system("gzip $tmprootdir/*.log");
system("mv $tmprootdir/*.log.gz $resultdir");
if ($genadvice) { system("mv $tmprootdir/*$rcsuf $tmprootdir/*$dcsuf $tmprootdir/*$ecsuf $resultdir");}

# print $rsynccmd."\n";
if ($do_rsync_remote) {
    system($rsynccmd);
} else {
    print "skip sync results to remote\n";
}

exit();

#####################################################################
#
# Supporting procedures
#

#
# Run a single benchmark once
#
sub runnit {
    my ($cfg, $stats, $bm, $bmdir, $bmargs, $k, $h, $log, $i) = @_;
    my $timingiteration = $defaulttimingiteration;
    my $tasksetmask = $defaulttasksetmask;
    my $cpuidmask = $defaultcpuidmask;
 
    # determine executatble
    $exe = getjvmexecutable($cfg);
#    print "===>$build==$exe<===\n";

    # deterimine heap size
    if ($exe =~ /\/R.*rvm/) {
	# JikesRVM with Rust MMTk - does not support this option - but it is fix-sized heap
	$heapcfg = "-Xms".$h."M ";
    } elsif ($exe =~ /rvm/) {
	# stock RVM
	$heapcfg = "-Xms".$h."M -X:gc:variableSizeHeap=false "
    }else {
	$heapcfg = "-Xms".$h."M -Xmx".$h."M ";
    }

    # determine command line (set iterations as side effect)
    my $timeout = $basetimeout * $timingiteration;
    my $perf = ($perfevents eq "") ? "" : "-wrap \"$rootdir/bin/probes/perf_event_launcher $perfevents \" -Djava.library.path=$rootdir/bin/probes -Dprobes=PerfEventLauncher ";

    $cmdline = "$bin/timedrun -t $timeout $exe ".$perf.$heapcfg;
    $cmdline .= getcmdline($cfg, $benchmark, \$timingiteration, \$tasksetmask, \$cpuidmask, \$cpufreq); 

    # set up arguments
    $bmargs =~ s/[[]bm[]]/$bm/;
    $bmrpt = "$bm " x ($timingiteration - 1);
    $bmargs =~ s/[[]bm#-1[]]/$bmrpt/;
    $bmargs =~ s/[[]#[]]/$timingiteration/;
		 
    if ($exe =~ /rvm/) {
	$bmargs =~ s/[[]mmtkstart[]]/$mmtkstart{$bmsuite{$bm}} /;
	$bmargs =~ s/[[]mmtkend[]]/ $mmtkend{$bmsuite{$bm}}/;
    } else {
	$bmargs =~ s/[[]mmtkstart[]]//;
	$bmargs =~ s/[[]mmtkend[]]//;
    }
    if ($genadvice) {
	($cafile) = $log =~ /(\S+).log/;
	$cmdline .= "-X:aos:enable_advice_generation=true -X:aos:cafo=$cafile.$i$rcsuf -X:aos:dcfo=$cafile.$i$dcsuf -X:base:profile_edge_counters=true -X:base:profile_edge_counter_file=$cafile.$i$ecsuf -X:aos:final_report_level=2 ";
    }
    $cmdline .= $bmargs;
    $cmdline = consolidateprobes($cmdline);
    $job = "mkdir -p $bmdir 2>/dev/null; cd $bmdir; $cmdline ";
    
#    print "---->$job<---\n";
    open (STATSLOG, ">>$log");
    print STATSLOG "\n-----\n$job\n";
    close STATSLOG;

    # sanity checks
    system("echo -n 'OS: ' >> $log");  system("uname -a >> $log");
    system("echo -n 'cpu: ' >> $log"); system("cat /proc/cpuinfo | grep 'model name' | head -1 >> $log");
    system("echo -n 'number of cores: ' >> $log"); system("cat /proc/cpuinfo | grep MHz | wc -l >> $log");
    if ($cpuidmask ne "" || $taskselmask ne "" || $cpufreq ne "") {
	system("echo 'using cpuidmask: $cpuidmask, taskselmask: $taskselmask ' >> $log");
	for ($cpunum = 0; $cpunum < 2; $cpunum++) {
	    system("echo -n 'enabling of cpu ".$cpunum.": ' >> $log");
	    if ($cpunum) {
		system("cat /sys/devices/system/cpu/cpu".$cpunum."/online >> $log");
	    }       
            # print out cpu speed for each cpu (just do 0 through 8 to cover all machines)
	    system("echo -n 'Frequency of cpu ".$cpunum.": ' >> $log");      
	    system("cat /sys/devices/system/cpu/cpu".$cpunum."/cpufreq/scaling_cur_freq >> $log");
	    system("echo -n 'Governor of cpu ".$cpunum.": ' >> $log");
	    system("cat /sys/devices/system/cpu/cpu".$cpunum."/cpufreq/scaling_governor >> $log");
	    system("echo -n 'Scaling_min_freq of cpu ".$cpunum.": ' >> $log");
	    system("cat /sys/devices/system/cpu/cpu".$cpunum."/cpufreq/scaling_min_freq >> $log");
	}
    }

    system("$job > $tmpfile 2>&1");
    system("cat $tmpfile >> $log");
}


#
# return special command line arguments for a particular collector
#
sub getcmdline {
    my ($config, $bm, $timingiteration, $taskselmask, $cpuidmask,$cpufreq) = @_;
    ($gc, $argstr) = $config =~ /([^|]+)[|]*(\S*)$/;
    @arg = split /[|]/, $argstr;
    my $args = $defaultopts;

    foreach $a (@arg) {
	if ($booleanopts{$a}) {
	    if (!($a eq "r" && $noreplay{$bm})) {
		$args .= " ".$booleanopts{$a};
	    }
	} else {
	    if ($a =~ /([^-]+)[-](.+)/) {
		if ($valueopts{$1}) {
		    if ($valueopts{$1} eq "iterations") {
			${$timingiteration} = $2;
		    } elsif ($valueopts{$1} eq "taskselmask") {
			${$taskselmask} = $2;
		    } elsif ($valueopts{$1} eq "cpuidmask") {
			${$cpuidmask} = $2;
		    } elsif ($valueopts{$1} eq "cpufreq") {
                        ${$cpufreq} = $2; 
		    } elsif ($1 eq "rn") {
			$replayid = $2;
			$args .= " ".$valueopts{$1};
		    } else {
			$args .= " ".$valueopts{$1}.$2;
		    }
		}
	    }
	}
    }
    # evaluate any variables (eg "$directoryname") in the argument strings
    while ($args =~ /\$/) {
	($pre, $var, $post) = $args =~ /^(.*)\$(\w+)(.*)$/;
	$args = $pre.${$var}.$post;
    }
    return $args." ";
}

#
# return an appropriate path for the rvm script
#
sub getjvmexecutable {
    my ($config) = @_;
    ($vmcfg, $argstr) = $config =~ /([^|]+)[|]*(\S*)$/;
    if ($vmcfg =~ /jdk1[.]/ || $vmcfg =~ /ibm-java/ || $vmcfg =~ /jrmc/) {
	return $jvmroot{$vmcfg}."/$vmcfg/bin/java";
    } else {
	$build = $builddir.$vmcfg;
	$build .= "$arch";
    
	return "$build/rvm";
    }
}

sub consolidateprobes {
    my ($cmdline) = @_;
    
    # find all the probe settings
    my (@probecmds) = $cmdline =~ /(-Dprobes=\S+)/g;
    %probeset = ();

    # if there is no probe settings, return unchanged cmdline
    if (scalar(@probecmds) < 1 ) { 
        return $cmdline;
    }  

    # make a set of the settings
    foreach my $p (@probecmds) {
	my (@probes) = $p =~ /[=,]([^,]+)/g; 
	foreach my $q (@probes) { $probeset{$q} = 1; }
    }
    
    # construct a new command
    my $newprobe = "-Dprobes=";
    foreach my $k (keys %probeset) { $newprobe .= $k.","; }
    $newprobe =~ s/,$//;

    # find where the first occurance of -D probes is
    my $index = index($cmdline, "-Dprobes", 0);

    # get rid of all probe settings
    $cmdline =~ s/(-Dprobes=\S+)//g;
    
    # insert new probe string at index where first one occured in old string
    substr $cmdline, $index, 0, $newprobe;

    return $cmdline;
}
