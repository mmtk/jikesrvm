/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
package org.jikesrvm.mm.mminterface;

import org.jikesrvm.scheduler.RVMThread;

import org.mmtk.utility.Log;

import org.vmmagic.pragma.*;

import org.vmmagic.unboxed.*;

import org.vmmagic.Unboxed;

import org.vmmagic.unboxed.Address;

import org.vmmagic.unboxed.Offset;

import org.jikesrvm.runtime.Magic;

import static org.jikesrvm.runtime.SysCall.sysCall;

import org.jikesrvm.VM;

import org.jikesrvm.runtime.Memory;

import static org.jikesrvm.runtime.EntrypointHelper.getField;

import static org.jikesrvm.runtime.UnboxedSizeConstants.BYTES_IN_WORD;

public class Selected {
  public static final String name = "@_PLAN_@";

  @Uninterruptible
  public static final class Plan extends @_PLAN_@ {
    private static final Plan plan = new Plan();

    @Inline
    public static Plan get () {
      return plan;
    }
  }

  @Uninterruptible
  public static final class Collector extends @_PLAN_@Collector {
  }

  @Uninterruptible

  @_RUST_MASK_START_@
  public static final class Constraints extends @_PLAN_@Constraints {
  @_RUST_MASK_END_@

  @_NO_RUST_MASK_START_@
  public static final class Constraints extends @_PLAN_NAME_@Context.Constraints {
  @_NO_RUST_MASK_END_@

    private static final Constraints constraints = new Constraints();

    @Inline
    public static Constraints get () {
      return constraints;
    }
  }

    @Uninterruptible
  @_RUST_MASK_START_@
  public static class Mutator extends @_PLAN_@Mutator {
    public Address setBlock(Address mmtkHandle) {
        return Address.zero();
    }
@_RUST_MASK_END_@
@_NO_RUST_MASK_START_@
  public static class Mutator extends @_PLAN_NAME_@Context {
    @_NO_RUST_MASK_END_@

    @Entrypoint
    Address mmtkHandle;

    @_NO_RUST_MASK_START_@
    @Override
    public void initMutator(int id) {
      Address tls = Magic.objectAsAddress(RVMThread.threadBySlot[id]);
      super.initMutator(id);
      if (VM.runningVM) {
        mmtkHandle = sysCall.sysBindMutator(tls);
        this.mmtkHandle = this.setBlock(mmtkHandle);
      }
    }
@_NO_RUST_MASK_END_@
    public void setHandle(Address handle){
      mmtkHandle = handle;
      this.mmtkHandle = this.setBlock(mmtkHandle);
    }

    public Address getHandle() {
      return mmtkHandle;
    }

    @Inline
    public final RVMThread getThread() {
      return (RVMThread) this;
    }

    @Inline
    public static Mutator get() {
      return RVMThread.getCurrentThread();
    }
  }
}
